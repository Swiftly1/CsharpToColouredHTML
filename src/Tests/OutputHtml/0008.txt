
<pre class="background">
<span class="comment">// Licensed to the .NET Foundation under one or more agreements.</span>
<span class="comment">// The .NET Foundation licenses this file to you under the MIT license.</span>
<span class="comment">// See the LICENSE file in the project root for more information.</span>

<span class="preprocessor">#</span><span class="preprocessor">nullable</span> <span class="preprocessor">disable</span>

<span class="keyword">using</span> <span class="namespace">System</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="namespace">System</span><span class="operator">.</span><span class="namespace">Collections</span><span class="operator">.</span><span class="namespace">Generic</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="namespace">System</span><span class="operator">.</span><span class="namespace">IO</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="namespace">System</span><span class="operator">.</span><span class="namespace">Reflection</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="namespace">System</span><span class="operator">.</span><span class="namespace">Runtime</span><span class="operator">.</span><span class="namespace">InteropServices</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="namespace">System</span><span class="operator">.</span><span class="namespace">Threading</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="namespace">System</span><span class="operator">.</span><span class="namespace">Threading</span><span class="operator">.</span><span class="namespace">Tasks</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="identifier">EnvDTE</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="namespace">Microsoft</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="namespace">Microsoft</span><span class="operator">.</span><span class="identifier">VisualStudio</span><span class="operator">.</span><span class="identifier">Shell</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="namespace">Microsoft</span><span class="operator">.</span><span class="identifier">VisualStudio</span><span class="operator">.</span><span class="identifier">Shell</span><span class="operator">.</span><span class="identifier">Interop</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="class">Task</span> <span class="operator">=</span> <span class="namespace">System</span><span class="operator">.</span><span class="namespace">Threading</span><span class="operator">.</span><span class="namespace">Tasks</span><span class="operator">.</span><span class="class">Task</span><span class="punctuation">;</span>

<span class="keyword">namespace</span> <span class="namespace">Roslyn</span><span class="operator">.</span><span class="namespace">Compilers</span><span class="operator">.</span><span class="namespace">Extension</span>
<span class="punctuation">{</span>
    <span class="punctuation">[</span><span class="class">Guid</span><span class="punctuation">(</span><span class="string">&quot;31C0675E-87A4-4061-A0DD-A4E510FCCF97&quot;</span><span class="punctuation">)</span><span class="punctuation">]</span>
    <span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="class">CompilerPackage</span> <span class="punctuation">:</span> <span class="class">AsyncPackage</span>
    <span class="punctuation">{</span>
        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="fieldName">RoslynHive</span> <span class="operator">=</span> <span class="keyword">null</span><span class="punctuation">;</span>

        <span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">async</span> <span class="class">Task</span> <span class="method">InitializeAsync</span><span class="punctuation">(</span><span class="struct">CancellationToken</span> <span class="parameter">cancellationToken</span><span class="punctuation">,</span> <span class="interface">IProgress</span><span class="punctuation">&lt;</span><span class="class">ServiceProgressData</span><span class="punctuation">&gt;</span> <span class="parameter">progress</span><span class="punctuation">)</span>
        <span class="punctuation">{</span>
            <span class="keyword">await</span> <span class="keyword">base</span><span class="operator">.</span><span class="method">InitializeAsync</span><span class="punctuation">(</span><span class="parameter">cancellationToken</span><span class="punctuation">,</span> <span class="parameter">progress</span><span class="punctuation">)</span><span class="operator">.</span><span class="method">ConfigureAwait</span><span class="punctuation">(</span><span class="keyword">true</span><span class="punctuation">)</span><span class="punctuation">;</span>

            <span class="keyword">await</span> <span class="class">JoinableTaskFactory</span><span class="operator">.</span><span class="method">SwitchToMainThreadAsync</span><span class="punctuation">(</span><span class="parameter">cancellationToken</span><span class="punctuation">)</span><span class="punctuation">;</span>

            <span class="keyword">var</span> <span class="localName">reg</span> <span class="operator">=</span> <span class="punctuation">(</span><span class="identifier">ILocalRegistry2</span><span class="punctuation">)</span><span class="keyword">await</span> <span class="method">GetServiceAsync</span><span class="punctuation">(</span><span class="keyword">typeof</span><span class="punctuation">(</span><span class="identifier">SLocalRegistry</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">.</span><span class="method">ConfigureAwait</span><span class="punctuation">(</span><span class="keyword">true</span><span class="punctuation">)</span><span class="punctuation">;</span>
            <span class="parameter">cancellationToken</span><span class="operator">.</span><span class="method">ThrowIfCancellationRequested</span><span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">;</span>
            <span class="class">Assumes</span><span class="operator">.</span><span class="method">Present</span><span class="punctuation">(</span><span class="localName">reg</span><span class="punctuation">)</span><span class="punctuation">;</span>

            <span class="keyword">var</span> <span class="localName">packagePath</span> <span class="operator">=</span> <span class="class">Path</span><span class="operator">.</span><span class="method">GetDirectoryName</span><span class="punctuation">(</span><span class="class">Assembly</span><span class="operator">.</span><span class="method">GetExecutingAssembly</span><span class="punctuation">(</span><span class="punctuation">)</span><span class="operator">.</span><span class="propertyName">Location</span><span class="punctuation">)</span><span class="punctuation">;</span>

            <span class="keyword">string</span> <span class="localName">localRegistryRoot</span><span class="punctuation">;</span>
            <span class="localName">reg</span><span class="operator">.</span><span class="method">GetLocalRegistryRoot</span><span class="punctuation">(</span><span class="keyword">out</span> <span class="localName">localRegistryRoot</span><span class="punctuation">)</span><span class="punctuation">;</span>
            <span class="keyword">var</span> <span class="localName">registryParts</span> <span class="operator">=</span> <span class="localName">localRegistryRoot</span><span class="operator">.</span><span class="method">Split</span><span class="punctuation">(</span><span class="string">&#39;\\&#39;</span><span class="punctuation">)</span><span class="punctuation">;</span>

            <span class="comment">// Is it a valid Hive looks similar to:</span>  
            <span class="comment">//  &#39;Software\Microsoft\VisualStudio\14.0&#39;  &#39;Software\Microsoft\VisualStudio\14.0Roslyn&#39;  &#39;Software\Microsoft\VSWinExpress\14.0&#39;</span>
            <span class="control">if</span> <span class="punctuation">(</span><span class="localName">registryParts</span><span class="operator">.</span><span class="propertyName">Length</span> <span class="operator">&gt;=</span> <span class="numericLiteral">4</span><span class="punctuation">)</span>
            <span class="punctuation">{</span>
                <span class="keyword">var</span> <span class="localName">skuName</span> <span class="operator">=</span> <span class="localName">registryParts</span><span class="punctuation">[</span><span class="numericLiteral">2</span><span class="punctuation">]</span><span class="punctuation">;</span>
                <span class="keyword">var</span> <span class="localName">hiveName</span> <span class="operator">=</span> <span class="localName">registryParts</span><span class="punctuation">[</span><span class="numericLiteral">3</span><span class="punctuation">]</span><span class="punctuation">;</span>
                <span class="fieldName">RoslynHive</span> <span class="operator">=</span> <span class="keyword">string</span><span class="operator">.</span><span class="method">Format</span><span class="punctuation">(</span><span class="string">@&quot;{0}.{1}&quot;</span><span class="punctuation">,</span> <span class="localName">registryParts</span><span class="punctuation">[</span><span class="numericLiteral">2</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="localName">registryParts</span><span class="punctuation">[</span><span class="numericLiteral">3</span><span class="punctuation">]</span><span class="punctuation">)</span><span class="punctuation">;</span>

                <span class="keyword">await</span> <span class="method">WriteMSBuildFilesAsync</span><span class="punctuation">(</span><span class="localName">packagePath</span><span class="punctuation">,</span> <span class="fieldName">RoslynHive</span><span class="punctuation">,</span> <span class="parameter">cancellationToken</span><span class="punctuation">)</span><span class="operator">.</span><span class="method">ConfigureAwait</span><span class="punctuation">(</span><span class="keyword">true</span><span class="punctuation">)</span><span class="punctuation">;</span>

                <span class="control">try</span>
                <span class="punctuation">{</span>
                    <span class="namespace">Microsoft</span><span class="operator">.</span><span class="identifier">Build</span><span class="operator">.</span><span class="identifier">Evaluation</span><span class="operator">.</span><span class="identifier">ProjectCollection</span><span class="operator">.</span><span class="class">GlobalProjectCollection</span><span class="operator">.</span><span class="identifier">DisableMarkDirty</span> <span class="operator">=</span> <span class="keyword">true</span><span class="punctuation">;</span>
                    <span class="namespace">Microsoft</span><span class="operator">.</span><span class="identifier">Build</span><span class="operator">.</span><span class="identifier">Evaluation</span><span class="operator">.</span><span class="identifier">ProjectCollection</span><span class="operator">.</span><span class="class">GlobalProjectCollection</span><span class="operator">.</span><span class="method">SetGlobalProperty</span><span class="punctuation">(</span><span class="string">&quot;RoslynHive&quot;</span><span class="punctuation">,</span> <span class="fieldName">RoslynHive</span><span class="punctuation">)</span><span class="punctuation">;</span>
                <span class="punctuation">}</span>
                <span class="control">finally</span>
                <span class="punctuation">{</span>
                    <span class="namespace">Microsoft</span><span class="operator">.</span><span class="identifier">Build</span><span class="operator">.</span><span class="identifier">Evaluation</span><span class="operator">.</span><span class="identifier">ProjectCollection</span><span class="operator">.</span><span class="class">GlobalProjectCollection</span><span class="operator">.</span><span class="identifier">DisableMarkDirty</span> <span class="operator">=</span> <span class="keyword">false</span><span class="punctuation">;</span>
                <span class="punctuation">}</span>
            <span class="punctuation">}</span>
        <span class="punctuation">}</span>

        <span class="keyword">private</span> <span class="keyword">async</span> <span class="class">Task</span> <span class="method">WriteMSBuildFilesAsync</span><span class="punctuation">(</span><span class="keyword">string</span> <span class="parameter">packagePath</span><span class="punctuation">,</span> <span class="keyword">string</span> <span class="parameter">hiveName</span><span class="punctuation">,</span> <span class="struct">CancellationToken</span> <span class="parameter">cancellationToken</span><span class="punctuation">)</span>
        <span class="punctuation">{</span>
            <span class="comment">// A map of the file name to the content we need to ensure exists in the file</span>
            <span class="keyword">var</span> <span class="localName">filesToWrite</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="class">Dictionary</span><span class="punctuation">&lt;</span><span class="keyword">string</span><span class="punctuation">,</span> <span class="keyword">string</span><span class="punctuation">&gt;</span><span class="punctuation">(</span><span class="class">StringComparer</span><span class="operator">.</span><span class="propertyName">OrdinalIgnoreCase</span><span class="punctuation">)</span><span class="punctuation">;</span>

            <span class="comment">// The props we want to be included as early as possible since we want our tasks to be used and</span>
            <span class="comment">// to ensure our setting of targets path happens early enough</span>
            <span class="localName">filesToWrite</span><span class="operator">.</span><span class="method">Add</span><span class="punctuation">(</span><span class="keyword">await</span> <span class="method">GetMSBuildRelativePathAsync</span><span class="punctuation">(</span><span class="string">$@&quot;</span><span class="string">Imports\Microsoft.Common.props\ImportBefore\Roslyn.Compilers.Extension.</span><span class="punctuation">{</span><span class="parameter">hiveName</span><span class="punctuation">}</span><span class="string">.props</span><span class="string">&quot;</span><span class="punctuation">,</span> <span class="parameter">cancellationToken</span><span class="punctuation">)</span><span class="operator">.</span><span class="method">ConfigureAwait</span><span class="punctuation">(</span><span class="keyword">true</span><span class="punctuation">)</span><span class="punctuation">,</span>
                <span class="string">$@&quot;</span><span class="string">&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;utf-8&quot;&quot;?&gt;</span>
<span class="string">&lt;Project xmlns=&quot;&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&quot;&gt;</span>
  <span class="string">&lt;PropertyGroup Condition=&quot;&quot;&#39;$(RoslynHive)&#39; == &#39;</span><span class="punctuation">{</span><span class="parameter">hiveName</span><span class="punctuation">}</span><span class="string">&#39;&quot;&quot;&gt;</span>
    <span class="string">&lt;CSharpCoreTargetsPath&gt;</span><span class="punctuation">{</span><span class="parameter">packagePath</span><span class="punctuation">}</span><span class="string">\Microsoft.CSharp.Core.targets&lt;/CSharpCoreTargetsPath&gt;</span>
    <span class="string">&lt;VisualBasicCoreTargetsPath&gt;</span><span class="punctuation">{</span><span class="parameter">packagePath</span><span class="punctuation">}</span><span class="string">\Microsoft.VisualBasic.Core.targets&lt;/VisualBasicCoreTargetsPath&gt;</span>
  <span class="string">&lt;/PropertyGroup&gt;</span> <span class="string">
</span>
  <span class="string">&lt;UsingTask TaskName=&quot;&quot;Microsoft.CodeAnalysis.BuildTasks.Csc&quot;&quot; AssemblyFile=&quot;&quot;</span><span class="punctuation">{</span><span class="parameter">packagePath</span><span class="punctuation">}</span><span class="string">\Microsoft.Build.Tasks.CodeAnalysis.dll&quot;&quot; Condition=&quot;&quot;&#39;$(RoslynHive)&#39; == &#39;</span><span class="punctuation">{</span><span class="parameter">hiveName</span><span class="punctuation">}</span><span class="string">&#39;&quot;&quot; /&gt;</span>
  <span class="string">&lt;UsingTask TaskName=&quot;&quot;Microsoft.CodeAnalysis.BuildTasks.Vbc&quot;&quot; AssemblyFile=&quot;&quot;</span><span class="punctuation">{</span><span class="parameter">packagePath</span><span class="punctuation">}</span><span class="string">\Microsoft.Build.Tasks.CodeAnalysis.dll&quot;&quot; Condition=&quot;&quot;&#39;$(RoslynHive)&#39; == &#39;</span><span class="punctuation">{</span><span class="parameter">hiveName</span><span class="punctuation">}</span><span class="string">&#39;&quot;&quot; /&gt;</span>
<span class="string">&lt;/Project&gt;</span><span class="string">&quot;</span><span class="punctuation">)</span><span class="punctuation">;</span>

            <span class="comment">// This targets content we want to be included later since the project file might touch UseSharedCompilation</span>
            <span class="keyword">var</span> <span class="localName">targetsContent</span> <span class="operator">=</span>
                    <span class="string">$@&quot;</span><span class="string">&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;utf-8&quot;&quot;?&gt;</span>
<span class="string">&lt;Project xmlns=&quot;&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&quot;&gt;</span>
  <span class="string">&lt;!-- If we&#39;re not using the compiler server, set ToolPath/Exe to direct to the exes in this package --&gt;</span>
  <span class="string">&lt;PropertyGroup Condition=&quot;&quot;&#39;$(RoslynHive)&#39; == &#39;</span><span class="punctuation">{</span><span class="parameter">hiveName</span><span class="punctuation">}</span><span class="string">&#39; and &#39;$(UseSharedCompilation)&#39; == &#39;false&#39;&quot;&quot;&gt;</span>
    <span class="string">&lt;CscToolPath&gt;</span><span class="punctuation">{</span><span class="parameter">packagePath</span><span class="punctuation">}</span><span class="string">&lt;/CscToolPath&gt;</span>
    <span class="string">&lt;CscToolExe&gt;csc.exe&lt;/CscToolExe&gt;</span>
    <span class="string">&lt;VbcToolPath&gt;</span><span class="punctuation">{</span><span class="parameter">packagePath</span><span class="punctuation">}</span><span class="string">&lt;/VbcToolPath&gt;</span>
    <span class="string">&lt;VbcToolExe&gt;vbc.exe&lt;/VbcToolExe&gt;</span>
  <span class="string">&lt;/PropertyGroup&gt;</span>
<span class="string">&lt;/Project&gt;</span><span class="string">&quot;</span><span class="punctuation">;</span>

            <span class="localName">filesToWrite</span><span class="operator">.</span><span class="method">Add</span><span class="punctuation">(</span><span class="keyword">await</span> <span class="method">GetMSBuildRelativePathAsync</span><span class="punctuation">(</span><span class="string">$@&quot;</span><span class="string">Microsoft.CSharp.targets\ImportBefore\Roslyn.Compilers.Extension.</span><span class="punctuation">{</span><span class="parameter">hiveName</span><span class="punctuation">}</span><span class="string">.targets</span><span class="string">&quot;</span><span class="punctuation">,</span> <span class="parameter">cancellationToken</span><span class="punctuation">)</span><span class="operator">.</span><span class="method">ConfigureAwait</span><span class="punctuation">(</span><span class="keyword">true</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="localName">targetsContent</span><span class="punctuation">)</span><span class="punctuation">;</span>
            <span class="localName">filesToWrite</span><span class="operator">.</span><span class="method">Add</span><span class="punctuation">(</span><span class="keyword">await</span> <span class="method">GetMSBuildRelativePathAsync</span><span class="punctuation">(</span><span class="string">$@&quot;</span><span class="string">Microsoft.VisualBasic.targets\ImportBefore\Roslyn.Compilers.Extension.</span><span class="punctuation">{</span><span class="parameter">hiveName</span><span class="punctuation">}</span><span class="string">.targets</span><span class="string">&quot;</span><span class="punctuation">,</span> <span class="parameter">cancellationToken</span><span class="punctuation">)</span><span class="operator">.</span><span class="method">ConfigureAwait</span><span class="punctuation">(</span><span class="keyword">true</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="localName">targetsContent</span><span class="punctuation">)</span><span class="punctuation">;</span>

            <span class="comment">// First we want to ensure any Roslyn files with our hive name that we aren&#39;t writing -- this is probably</span>
            <span class="comment">// leftovers from older extensions</span>
            <span class="keyword">var</span> <span class="localName">msbuildDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="class">DirectoryInfo</span><span class="punctuation">(</span><span class="keyword">await</span> <span class="method">GetMSBuildPathAsync</span><span class="punctuation">(</span><span class="parameter">cancellationToken</span><span class="punctuation">)</span><span class="operator">.</span><span class="method">ConfigureAwait</span><span class="punctuation">(</span><span class="keyword">true</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">;</span>
            <span class="control">if</span> <span class="punctuation">(</span><span class="localName">msbuildDirectory</span><span class="operator">.</span><span class="propertyName">Exists</span><span class="punctuation">)</span>
            <span class="punctuation">{</span>
                <span class="control">foreach</span> <span class="punctuation">(</span><span class="keyword">var</span> <span class="localName">file</span> <span class="control">in</span> <span class="localName">msbuildDirectory</span><span class="operator">.</span><span class="method">EnumerateFiles</span><span class="punctuation">(</span><span class="string">$&quot;</span><span class="string">*Roslyn*</span><span class="punctuation">{</span><span class="parameter">hiveName</span><span class="punctuation">}</span><span class="string">*</span><span class="string">&quot;</span><span class="punctuation">,</span> <span class="enumName">SearchOption</span><span class="operator">.</span><span class="enumMember">AllDirectories</span><span class="punctuation">)</span><span class="punctuation">)</span>
                <span class="punctuation">{</span>
                    <span class="control">if</span> <span class="punctuation">(</span><span class="operator">!</span><span class="localName">filesToWrite</span><span class="operator">.</span><span class="method">ContainsKey</span><span class="punctuation">(</span><span class="localName">file</span><span class="operator">.</span><span class="propertyName">FullName</span><span class="punctuation">)</span><span class="punctuation">)</span>
                    <span class="punctuation">{</span>
                        <span class="localName">file</span><span class="operator">.</span><span class="method">Delete</span><span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">;</span>
                    <span class="punctuation">}</span>
                <span class="punctuation">}</span>
            <span class="punctuation">}</span>

            <span class="control">try</span>
            <span class="punctuation">{</span>
                <span class="control">foreach</span> <span class="punctuation">(</span><span class="keyword">var</span> <span class="localName">fileAndContents</span> <span class="control">in</span> <span class="localName">filesToWrite</span><span class="punctuation">)</span>
                <span class="punctuation">{</span>
                    <span class="keyword">var</span> <span class="localName">parentDirectory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="class">DirectoryInfo</span><span class="punctuation">(</span><span class="class">Path</span><span class="operator">.</span><span class="method">GetDirectoryName</span><span class="punctuation">(</span><span class="localName">fileAndContents</span><span class="operator">.</span><span class="propertyName">Key</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="punctuation">;</span>
                    <span class="localName">parentDirectory</span><span class="operator">.</span><span class="method">Create</span><span class="punctuation">(</span><span class="punctuation">)</span><span class="punctuation">;</span>

                    <span class="comment">// If we already know the file has the same contents, then we can skip</span>
                    <span class="control">if</span> <span class="punctuation">(</span><span class="class">File</span><span class="operator">.</span><span class="method">Exists</span><span class="punctuation">(</span><span class="localName">fileAndContents</span><span class="operator">.</span><span class="propertyName">Key</span><span class="punctuation">)</span> <span class="operator">&amp;&amp;</span> <span class="class">File</span><span class="operator">.</span><span class="method">ReadAllText</span><span class="punctuation">(</span><span class="localName">fileAndContents</span><span class="operator">.</span><span class="propertyName">Key</span><span class="punctuation">)</span> <span class="operator">==</span> <span class="localName">fileAndContents</span><span class="operator">.</span><span class="propertyName">Value</span><span class="punctuation">)</span>
                    <span class="punctuation">{</span>
                        <span class="control">continue</span><span class="punctuation">;</span>
                    <span class="punctuation">}</span>

                    <span class="class">File</span><span class="operator">.</span><span class="method">WriteAllText</span><span class="punctuation">(</span><span class="localName">fileAndContents</span><span class="operator">.</span><span class="propertyName">Key</span><span class="punctuation">,</span> <span class="localName">fileAndContents</span><span class="operator">.</span><span class="propertyName">Value</span><span class="punctuation">)</span><span class="punctuation">;</span>
                <span class="punctuation">}</span>
            <span class="punctuation">}</span>
            <span class="control">catch</span> <span class="punctuation">(</span><span class="class">Exception</span> <span class="localName">e</span><span class="punctuation">)</span>
            <span class="punctuation">{</span>
                <span class="keyword">var</span> <span class="localName">msg</span> <span class="operator">=</span>
<span class="string">$@&quot;</span><span class="punctuation">{</span><span class="localName">e</span><span class="operator">.</span><span class="propertyName">Message</span><span class="punctuation">}</span><span class="string"></span><span class="string">
</span>
<span class="string">To reload the Roslyn compiler package, close Visual Studio and any MSBuild processes, then restart Visual Studio.</span><span class="string">&quot;</span><span class="punctuation">;</span>

                <span class="class">VsShellUtilities</span><span class="operator">.</span><span class="method">ShowMessageBox</span><span class="punctuation">(</span>
                    <span class="keyword">this</span><span class="punctuation">,</span>
                    <span class="localName">msg</span><span class="punctuation">,</span>
                    <span class="keyword">null</span><span class="punctuation">,</span>
                    <span class="class">OLEMSGICON</span><span class="operator">.</span><span class="identifier">OLEMSGICON_WARNING</span><span class="punctuation">,</span>
                    <span class="class">OLEMSGBUTTON</span><span class="operator">.</span><span class="identifier">OLEMSGBUTTON_OK</span><span class="punctuation">,</span>
                    <span class="class">OLEMSGDEFBUTTON</span><span class="operator">.</span><span class="identifier">OLEMSGDEFBUTTON_FIRST</span><span class="punctuation">)</span><span class="punctuation">;</span>
            <span class="punctuation">}</span>
        <span class="punctuation">}</span>


        <span class="keyword">private</span> <span class="keyword">async</span> <span class="class">Task</span><span class="punctuation">&lt;</span><span class="keyword">string</span><span class="punctuation">&gt;</span> <span class="method">GetMSBuildVersionStringAsync</span><span class="punctuation">(</span><span class="struct">CancellationToken</span> <span class="parameter">cancellationToken</span><span class="punctuation">)</span>
        <span class="punctuation">{</span>
            <span class="keyword">await</span> <span class="identifier">ThreadHelper</span><span class="operator">.</span><span class="class">JoinableTaskFactory</span><span class="operator">.</span><span class="method">SwitchToMainThreadAsync</span><span class="punctuation">(</span><span class="parameter">cancellationToken</span><span class="punctuation">)</span><span class="punctuation">;</span>

            <span class="keyword">var</span> <span class="localName">dte</span> <span class="operator">=</span> <span class="punctuation">(</span><span class="identifier">DTE</span><span class="punctuation">)</span><span class="keyword">await</span> <span class="method">GetServiceAsync</span><span class="punctuation">(</span><span class="keyword">typeof</span><span class="punctuation">(</span><span class="identifier">SDTE</span><span class="punctuation">)</span><span class="punctuation">)</span><span class="operator">.</span><span class="method">ConfigureAwait</span><span class="punctuation">(</span><span class="keyword">true</span><span class="punctuation">)</span><span class="punctuation">;</span>
            <span class="keyword">var</span> <span class="localName">parts</span> <span class="operator">=</span> <span class="localName">dte</span><span class="operator">.</span><span class="identifier">Version</span><span class="operator">.</span><span class="method">Split</span><span class="punctuation">(</span><span class="string">&#39;.&#39;</span><span class="punctuation">)</span><span class="punctuation">;</span>
            <span class="control">if</span> <span class="punctuation">(</span><span class="localName">parts</span><span class="operator">.</span><span class="identifier">Length</span> <span class="operator">!=</span> <span class="numericLiteral">2</span><span class="punctuation">)</span>
            <span class="punctuation">{</span>
                <span class="control">throw</span> <span class="keyword">new</span> <span class="class">Exception</span><span class="punctuation">(</span><span class="string">$&quot;</span><span class="string">Unrecognized Visual Studio Version:</span> <span class="punctuation">{</span><span class="localName">dte</span><span class="operator">.</span><span class="identifier">Version</span><span class="punctuation">}</span><span class="string">&quot;</span><span class="punctuation">)</span><span class="punctuation">;</span>
            <span class="punctuation">}</span>

            <span class="keyword">int</span> <span class="localName">majorVersion</span> <span class="operator">=</span> <span class="keyword">int</span><span class="operator">.</span><span class="method">Parse</span><span class="punctuation">(</span><span class="localName">parts</span><span class="punctuation">[</span><span class="numericLiteral">0</span><span class="punctuation">]</span><span class="punctuation">)</span><span class="punctuation">;</span>

            <span class="control">if</span> <span class="punctuation">(</span><span class="localName">majorVersion</span> <span class="operator">&gt;=</span> <span class="numericLiteral">16</span><span class="punctuation">)</span>
            <span class="punctuation">{</span>
                <span class="comment">// Starting in Visual Studio 2019, the folder is just called &quot;Current&quot;. See</span>
                <span class="comment">// https://github.com/Microsoft/msbuild/issues/4149 for further commentary.</span>
                <span class="control">return</span> <span class="string">&quot;Current&quot;</span><span class="punctuation">;</span>
            <span class="punctuation">}</span>
            <span class="control">else</span>
            <span class="punctuation">{</span>
                <span class="control">return</span> <span class="localName">majorVersion</span> <span class="operator">+</span> <span class="string">&quot;.0&quot;</span><span class="punctuation">;</span>
            <span class="punctuation">}</span>
        <span class="punctuation">}</span>

        <span class="keyword">private</span> <span class="keyword">async</span> <span class="class">Task</span><span class="punctuation">&lt;</span><span class="keyword">string</span><span class="punctuation">&gt;</span> <span class="method">GetMSBuildPathAsync</span><span class="punctuation">(</span><span class="struct">CancellationToken</span> <span class="parameter">cancellationToken</span><span class="punctuation">)</span>
        <span class="punctuation">{</span>
            <span class="keyword">var</span> <span class="localName">version</span> <span class="operator">=</span> <span class="keyword">await</span> <span class="method">GetMSBuildVersionStringAsync</span><span class="punctuation">(</span><span class="parameter">cancellationToken</span><span class="punctuation">)</span><span class="operator">.</span><span class="method">ConfigureAwait</span><span class="punctuation">(</span><span class="keyword">true</span><span class="punctuation">)</span><span class="punctuation">;</span>
            <span class="keyword">var</span> <span class="localName">localAppData</span> <span class="operator">=</span> <span class="class">Environment</span><span class="operator">.</span><span class="method">GetFolderPath</span><span class="punctuation">(</span><span class="class">Environment</span><span class="operator">.</span><span class="enumName">SpecialFolder</span><span class="operator">.</span><span class="enumMember">LocalApplicationData</span><span class="punctuation">)</span><span class="punctuation">;</span>
            <span class="control">return</span> <span class="class">Path</span><span class="operator">.</span><span class="method">Combine</span><span class="punctuation">(</span><span class="localName">localAppData</span><span class="punctuation">,</span> <span class="string">$@&quot;</span><span class="string">Microsoft\MSBuild\</span><span class="punctuation">{</span><span class="localName">version</span><span class="punctuation">}</span><span class="string">&quot;</span><span class="punctuation">)</span><span class="punctuation">;</span>
        <span class="punctuation">}</span>

        <span class="keyword">private</span> <span class="keyword">async</span> <span class="class">Task</span><span class="punctuation">&lt;</span><span class="keyword">string</span><span class="punctuation">&gt;</span> <span class="method">GetMSBuildRelativePathAsync</span><span class="punctuation">(</span><span class="keyword">string</span> <span class="parameter">relativePath</span><span class="punctuation">,</span> <span class="struct">CancellationToken</span> <span class="parameter">cancellationToken</span><span class="punctuation">)</span>
        <span class="punctuation">{</span>
            <span class="control">return</span> <span class="class">Path</span><span class="operator">.</span><span class="method">Combine</span><span class="punctuation">(</span><span class="keyword">await</span> <span class="method">GetMSBuildPathAsync</span><span class="punctuation">(</span><span class="parameter">cancellationToken</span><span class="punctuation">)</span><span class="operator">.</span><span class="method">ConfigureAwait</span><span class="punctuation">(</span><span class="keyword">true</span><span class="punctuation">)</span><span class="punctuation">,</span> <span class="parameter">relativePath</span><span class="punctuation">)</span><span class="punctuation">;</span>
        <span class="punctuation">}</span>
    <span class="punctuation">}</span>
<span class="punctuation">}</span></pre>

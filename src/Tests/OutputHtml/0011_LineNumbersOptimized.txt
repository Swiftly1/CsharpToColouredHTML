
<pre class="background">
<table>
<tbody>
<tr><td class="line_no" line_no="0"></td><td class="code_column"><span class="keyword">using</span> System;</td></tr><tr><td class="line_no" line_no="1"></td><td class="code_column"><span class="keyword">using</span> System.Collections.Generic;</td></tr><tr><td class="line_no" line_no="2"></td><td class="code_column"><span class="keyword">using</span> System.Runtime.CompilerServices;</td></tr><tr><td class="line_no" line_no="3"></td><td></tr><tr><td class="line_no" line_no="4"></td><td class="code_column"><span class="keyword">namespace</span> DictionaryList</td></tr><tr><td class="line_no" line_no="5"></td><td class="code_column">{</td></tr><tr><td class="line_no" line_no="6"></td><td class="code_column">    <span class="keyword">public class</span> <span class="class">DictionaryList</span>&lt;<span class="typeParam">T</span>, <span class="typeParam">U</span>&gt;</td></tr><tr><td class="line_no" line_no="7"></td><td class="code_column">    {</td></tr><tr><td class="line_no" line_no="8"></td><td class="code_column">        <span class="keyword">private readonly</span> <span class="class">Node</span>&lt;<span class="typeParam">T</span>, <span class="typeParam">U</span>&gt; Root = <span class="keyword">new</span> <span class="class">Node</span>&lt;<span class="typeParam">T</span>, <span class="typeParam">U</span>&gt;(<span class="keyword">default</span>!, <span class="keyword">null</span>) { IsRoot = <span class="keyword">true</span> };</td></tr><tr><td class="line_no" line_no="9"></td><td></tr><tr><td class="line_no" line_no="10"></td><td class="code_column">        <span class="comment">/// &lt;summary&gt;</span></td></tr><tr><td class="line_no" line_no="11"></td><td class="code_column">        <span class="comment">/// This parameter indicates whether key contains NULLs e.g [UserA, null, new User()].</span></td></tr><tr><td class="line_no" line_no="12"></td><td class="code_column">        <span class="comment">/// Allowing NULLs within keys has some performance - speed and memory penalty, that&#39;s why it is disabled by default.</span></td></tr><tr><td class="line_no" line_no="13"></td><td class="code_column">        <span class="comment">/// &lt;/summary&gt;</span></td></tr><tr><td class="line_no" line_no="14"></td><td class="code_column">        <span class="keyword">public bool</span> AllowNULLsInKeys { <span class="keyword">get</span>; <span class="keyword">set</span>; }</td></tr><tr><td class="line_no" line_no="15"></td><td></tr><tr><td class="line_no" line_no="16"></td><td class="code_column">        <span class="comment">/// &lt;summary&gt;</span></td></tr><tr><td class="line_no" line_no="17"></td><td class="code_column">        <span class="comment">///</span> </td></tr><tr><td class="line_no" line_no="18"></td><td class="code_column">        <span class="comment">/// &lt;/summary&gt;</span></td></tr><tr><td class="line_no" line_no="19"></td><td class="code_column">        <span class="comment">/// &lt;param name=&quot;</span><span class="parameter">allow_keys_with_nulls</span><span class="comment">&quot;&gt;This parameter indicates whether key contains NULLs e.g [UserA, null, new User()].</span></td></tr><tr><td class="line_no" line_no="20"></td><td class="code_column">        <span class="comment">/// Allowing NULLs within keys has some performance - speed and memory penalty, that&#39;s why it is disabled by default.&lt;/param&gt;</span></td></tr><tr><td class="line_no" line_no="21"></td><td class="code_column">        <span class="keyword">public</span> <span class="class">DictionaryList</span>(<span class="keyword">bool</span> <span class="parameter">allow_keys_with_nulls</span> = <span class="keyword">false</span>)</td></tr><tr><td class="line_no" line_no="22"></td><td class="code_column">        {</td></tr><tr><td class="line_no" line_no="23"></td><td class="code_column">            AllowNULLsInKeys = <span class="parameter">allow_keys_with_nulls</span>;</td></tr><tr><td class="line_no" line_no="24"></td><td class="code_column">        }</td></tr><tr><td class="line_no" line_no="25"></td><td></tr><tr><td class="line_no" line_no="26"></td><td class="code_column">        <span class="keyword">public void</span> <span class="method">Add</span>(<span class="class">List</span>&lt;<span class="typeParam">T</span>&gt; <span class="parameter">data</span>, <span class="typeParam">U</span> <span class="parameter">value</span>)</td></tr><tr><td class="line_no" line_no="27"></td><td class="code_column">        {</td></tr><tr><td class="line_no" line_no="28"></td><td class="code_column">            <span class="keyword">var</span> <span class="localName">current</span> = Root;</td></tr><tr><td class="line_no" line_no="29"></td><td></tr><tr><td class="line_no" line_no="30"></td><td class="code_column">            <span class="control">for</span> (<span class="keyword">int</span> <span class="localName">i</span> = <span class="numericLiteral">0</span>; <span class="localName">i</span> &lt; <span class="parameter">data</span>.Count; <span class="localName">i</span>++)</td></tr><tr><td class="line_no" line_no="31"></td><td class="code_column">            {</td></tr><tr><td class="line_no" line_no="32"></td><td class="code_column">                <span class="typeParam">T</span> <span class="localName">item</span> = <span class="parameter">data</span>[<span class="localName">i</span>];</td></tr><tr><td class="line_no" line_no="33"></td><td></tr><tr><td class="line_no" line_no="34"></td><td class="code_column">                <span class="control">if</span> (!AllowNULLsInKeys &amp;&amp; <span class="localName">item</span> == <span class="keyword">null</span>)</td></tr><tr><td class="line_no" line_no="35"></td><td class="code_column">                    <span class="control">throw</span> <span class="keyword">new</span> <span class="class">ArgumentException</span>(<span class="string">$&quot;Element at index &#39;</span>{<span class="localName">i</span>}<span class="string">&#39; is NULL. It cannot be used as a Key&#39;s element. &quot;</span> +</td></tr><tr><td class="line_no" line_no="36"></td><td class="code_column">                        <span class="string">$&quot;If you want to use NULLs inside Keys, then either use constructor &#39;DictionaryList(true)&#39; or set property &#39;AllowNULLsInKeys&#39; to true.&quot;</span>);</td></tr><tr><td class="line_no" line_no="37"></td><td></tr><tr><td class="line_no" line_no="38"></td><td class="code_column">                <span class="class">Node</span>&lt;<span class="typeParam">T</span>, <span class="typeParam">U</span>&gt; <span class="localName">found</span> = <span class="method">FindNode</span>(<span class="localName">current</span>, <span class="localName">item</span>);</td></tr><tr><td class="line_no" line_no="39"></td><td></tr><tr><td class="line_no" line_no="40"></td><td class="code_column">                <span class="keyword">var</span> <span class="localName">isLast</span> = <span class="localName">i</span> == <span class="parameter">data</span>.Count - <span class="numericLiteral">1</span>;</td></tr><tr><td class="line_no" line_no="41"></td><td></tr><tr><td class="line_no" line_no="42"></td><td class="code_column">                <span class="control">if</span> (<span class="localName">found</span> != <span class="keyword">null</span>)</td></tr><tr><td class="line_no" line_no="43"></td><td class="code_column">                {</td></tr><tr><td class="line_no" line_no="44"></td><td class="code_column">                    <span class="control">if</span> (<span class="localName">isLast</span>)</td></tr><tr><td class="line_no" line_no="45"></td><td class="code_column">                    {</td></tr><tr><td class="line_no" line_no="46"></td><td class="code_column">                        <span class="control">if</span> (<span class="localName">found</span>.StoredValue <span class="keyword">is null</span>)</td></tr><tr><td class="line_no" line_no="47"></td><td class="code_column">                        {</td></tr><tr><td class="line_no" line_no="48"></td><td class="code_column">                            <span class="localName">found</span>.StoredValue = <span class="keyword">new</span> <span class="class">ValueWrapper</span>&lt;<span class="typeParam">U</span>&gt;(<span class="keyword">true</span>, <span class="parameter">value</span>);</td></tr><tr><td class="line_no" line_no="49"></td><td class="code_column">                        }</td></tr><tr><td class="line_no" line_no="50"></td><td class="code_column">                        <span class="control">else</span></td></tr><tr><td class="line_no" line_no="51"></td><td class="code_column">                        {</td></tr><tr><td class="line_no" line_no="52"></td><td class="code_column">                            <span class="control">if</span> (<span class="localName">found</span>.StoredValue.HasValue &amp;&amp; !<span class="localName">found</span>.StoredValue.Value!.<span class="method">Equals</span>(<span class="parameter">value</span>))</td></tr><tr><td class="line_no" line_no="53"></td><td class="code_column">                            {</td></tr><tr><td class="line_no" line_no="54"></td><td class="code_column">                                <span class="control">throw</span> <span class="keyword">new</span> <span class="class">ArgumentException</span>(<span class="string">$&quot;Value: &#39;</span>{<span class="parameter">value</span>}<span class="string">&#39; cannot be saved because there&#39;s already value:&quot;</span> +</td></tr><tr><td class="line_no" line_no="55"></td><td class="code_column">                                    <span class="string">$&quot;</span> {<span class="localName">found</span>.StoredValue.Value}<span class="string">. Key:</span> {<span class="keyword">string</span>.<span class="method">Join</span>(<span class="string">&quot;,&quot;</span>, <span class="parameter">data</span>)}<span class="string">&quot;</span>);</td></tr><tr><td class="line_no" line_no="56"></td><td class="code_column">                            }</td></tr><tr><td class="line_no" line_no="57"></td><td class="code_column">                        }</td></tr><tr><td class="line_no" line_no="58"></td><td class="code_column">                    }</td></tr><tr><td class="line_no" line_no="59"></td><td></tr><tr><td class="line_no" line_no="60"></td><td class="code_column">                    <span class="localName">current</span> = <span class="localName">found</span>;</td></tr><tr><td class="line_no" line_no="61"></td><td class="code_column">                }</td></tr><tr><td class="line_no" line_no="62"></td><td class="code_column">                <span class="control">else</span></td></tr><tr><td class="line_no" line_no="63"></td><td class="code_column">                {</td></tr><tr><td class="line_no" line_no="64"></td><td class="code_column">                    <span class="keyword">var</span> <span class="localName">wrapper2</span> = <span class="keyword">new</span> <span class="class">ValueWrapper</span>&lt;<span class="typeParam">U</span>&gt;(<span class="localName">isLast</span>, <span class="parameter">value</span>);</td></tr><tr><td class="line_no" line_no="65"></td><td class="code_column">                    <span class="localName">current</span> = <span class="localName">current</span>.<span class="method">Add</span>(<span class="localName">item</span>, <span class="localName">wrapper2</span>);</td></tr><tr><td class="line_no" line_no="66"></td><td class="code_column">                }</td></tr><tr><td class="line_no" line_no="67"></td><td class="code_column">            }</td></tr><tr><td class="line_no" line_no="68"></td><td class="code_column">        }</td></tr><tr><td class="line_no" line_no="69"></td><td></tr><tr><td class="line_no" line_no="70"></td><td class="code_column">        [<span class="class">MethodImpl</span>(<span class="enumName">MethodImplOptions</span>.AggressiveInlining)]</td></tr><tr><td class="line_no" line_no="71"></td><td class="code_column">        <span class="keyword">private</span> <span class="class">Node</span>&lt;<span class="typeParam">T</span>, <span class="typeParam">U</span>&gt; <span class="method">FindNode</span>(<span class="class">Node</span>&lt;<span class="typeParam">T</span>, <span class="typeParam">U</span>&gt; <span class="parameter">current</span>, <span class="typeParam">T</span> <span class="parameter">item</span>)</td></tr><tr><td class="line_no" line_no="72"></td><td class="code_column">        {</td></tr><tr><td class="line_no" line_no="73"></td><td class="code_column">            <span class="control">if</span> (AllowNULLsInKeys)</td></tr><tr><td class="line_no" line_no="74"></td><td class="code_column">            {</td></tr><tr><td class="line_no" line_no="75"></td><td class="code_column">                <span class="control">for</span> (<span class="keyword">int</span> <span class="localName">i</span> = <span class="numericLiteral">0</span>; <span class="localName">i</span> &lt; <span class="parameter">current</span>.Children.Count; <span class="localName">i</span>++)</td></tr><tr><td class="line_no" line_no="76"></td><td class="code_column">                {</td></tr><tr><td class="line_no" line_no="77"></td><td class="code_column">                    <span class="control">if</span> (<span class="method">Equals</span>(<span class="parameter">current</span>.Children[<span class="localName">i</span>].ArrayValue, <span class="parameter">item</span>))</td></tr><tr><td class="line_no" line_no="78"></td><td class="code_column">                        <span class="control">return</span> <span class="parameter">current</span>.Children[<span class="localName">i</span>];</td></tr><tr><td class="line_no" line_no="79"></td><td class="code_column">                }</td></tr><tr><td class="line_no" line_no="80"></td><td class="code_column">            }</td></tr><tr><td class="line_no" line_no="81"></td><td class="code_column">            <span class="control">else</span></td></tr><tr><td class="line_no" line_no="82"></td><td class="code_column">            {</td></tr><tr><td class="line_no" line_no="83"></td><td class="code_column">                <span class="control">for</span> (<span class="keyword">int</span> <span class="localName">i</span> = <span class="numericLiteral">0</span>; <span class="localName">i</span> &lt; <span class="parameter">current</span>.Children.Count; <span class="localName">i</span>++)</td></tr><tr><td class="line_no" line_no="84"></td><td class="code_column">                {</td></tr><tr><td class="line_no" line_no="85"></td><td class="code_column">                    <span class="control">if</span> (<span class="parameter">current</span>.Children[<span class="localName">i</span>].ArrayValue!.<span class="method">Equals</span>(<span class="parameter">item</span>))</td></tr><tr><td class="line_no" line_no="86"></td><td class="code_column">                        <span class="control">return</span> <span class="parameter">current</span>.Children[<span class="localName">i</span>];</td></tr><tr><td class="line_no" line_no="87"></td><td class="code_column">                }</td></tr><tr><td class="line_no" line_no="88"></td><td class="code_column">            }</td></tr><tr><td class="line_no" line_no="89"></td><td></tr><tr><td class="line_no" line_no="90"></td><td class="code_column">            <span class="control">return</span> <span class="keyword">null</span>;</td></tr><tr><td class="line_no" line_no="91"></td><td class="code_column">        }</td></tr><tr><td class="line_no" line_no="92"></td><td></tr><tr><td class="line_no" line_no="93"></td><td class="code_column">        <span class="keyword">public bool</span> <span class="method">TryGet</span>(<span class="class">List</span>&lt;<span class="typeParam">T</span>&gt; <span class="parameter">data</span>, <span class="keyword">out</span> <span class="typeParam">U</span>? <span class="parameter">value</span>)</td></tr><tr><td class="line_no" line_no="94"></td><td class="code_column">        {</td></tr><tr><td class="line_no" line_no="95"></td><td class="code_column">            <span class="keyword">var</span> <span class="localName">current</span> = Root;</td></tr><tr><td class="line_no" line_no="96"></td><td></tr><tr><td class="line_no" line_no="97"></td><td class="code_column">            <span class="control">for</span> (<span class="keyword">int</span> <span class="localName">i</span> = <span class="numericLiteral">0</span>; <span class="localName">i</span> &lt; <span class="parameter">data</span>.Count; <span class="localName">i</span>++)</td></tr><tr><td class="line_no" line_no="98"></td><td class="code_column">            {</td></tr><tr><td class="line_no" line_no="99"></td><td class="code_column">                <span class="typeParam">T</span> <span class="localName">item</span> = <span class="parameter">data</span>[<span class="localName">i</span>];</td></tr><tr><td class="line_no" line_no="100"></td><td></tr><tr><td class="line_no" line_no="101"></td><td class="code_column">                <span class="class">Node</span>&lt;<span class="typeParam">T</span>, <span class="typeParam">U</span>&gt; <span class="localName">found</span> = <span class="method">FindNode</span>(<span class="localName">current</span>, <span class="localName">item</span>);</td></tr><tr><td class="line_no" line_no="102"></td><td></tr><tr><td class="line_no" line_no="103"></td><td class="code_column">                <span class="keyword">var</span> <span class="localName">isLast</span> = <span class="localName">i</span> == <span class="parameter">data</span>.Count - <span class="numericLiteral">1</span>;</td></tr><tr><td class="line_no" line_no="104"></td><td></tr><tr><td class="line_no" line_no="105"></td><td class="code_column">                <span class="control">if</span> (<span class="localName">found</span> != <span class="keyword">null</span>)</td></tr><tr><td class="line_no" line_no="106"></td><td class="code_column">                {</td></tr><tr><td class="line_no" line_no="107"></td><td class="code_column">                    <span class="control">if</span> (<span class="localName">isLast</span>)</td></tr><tr><td class="line_no" line_no="108"></td><td class="code_column">                    {</td></tr><tr><td class="line_no" line_no="109"></td><td class="code_column">                        <span class="control">if</span> (<span class="localName">found</span>.StoredValue == <span class="keyword">null</span> || !<span class="localName">found</span>.StoredValue.HasValue)</td></tr><tr><td class="line_no" line_no="110"></td><td class="code_column">                            <span class="control">goto</span> Fail;</td></tr><tr><td class="line_no" line_no="111"></td><td></tr><tr><td class="line_no" line_no="112"></td><td class="code_column">                        <span class="parameter">value</span> = <span class="localName">found</span>.StoredValue.Value;</td></tr><tr><td class="line_no" line_no="113"></td><td class="code_column">                        <span class="control">return</span> <span class="keyword">true</span>;</td></tr><tr><td class="line_no" line_no="114"></td><td class="code_column">                    }</td></tr><tr><td class="line_no" line_no="115"></td><td></tr><tr><td class="line_no" line_no="116"></td><td class="code_column">                    <span class="localName">current</span> = <span class="localName">found</span>;</td></tr><tr><td class="line_no" line_no="117"></td><td class="code_column">                }</td></tr><tr><td class="line_no" line_no="118"></td><td class="code_column">                <span class="control">else</span></td></tr><tr><td class="line_no" line_no="119"></td><td class="code_column">                {</td></tr><tr><td class="line_no" line_no="120"></td><td class="code_column">                    <span class="control">goto</span> Fail;</td></tr><tr><td class="line_no" line_no="121"></td><td class="code_column">                }</td></tr><tr><td class="line_no" line_no="122"></td><td class="code_column">            }</td></tr><tr><td class="line_no" line_no="123"></td><td></tr><tr><td class="line_no" line_no="124"></td><td class="code_column">            Fail:</td></tr><tr><td class="line_no" line_no="125"></td><td class="code_column">            <span class="parameter">value</span> = <span class="keyword">default</span>;</td></tr><tr><td class="line_no" line_no="126"></td><td class="code_column">            <span class="control">return</span> <span class="keyword">false</span>;</td></tr><tr><td class="line_no" line_no="127"></td><td class="code_column">        }</td></tr><tr><td class="line_no" line_no="128"></td><td class="code_column">    }</td></tr><tr><td class="line_no" line_no="129"></td><td class="code_column">}</td></tr></tbody>
</table></pre>

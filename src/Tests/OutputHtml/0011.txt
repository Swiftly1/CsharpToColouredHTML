
<pre class="background">
<span class="keyword">using</span> <span class="namespace">System</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="namespace">System</span><span class="operator">.</span><span class="namespace">Collections</span><span class="operator">.</span><span class="namespace">Generic</span><span class="punctuation">;</span>
<span class="keyword">using</span> <span class="namespace">System</span><span class="operator">.</span><span class="namespace">Runtime</span><span class="operator">.</span><span class="namespace">CompilerServices</span><span class="punctuation">;</span>

<span class="keyword">namespace</span> <span class="namespace">DictionaryList</span>
<span class="punctuation">{</span>
    <span class="keyword">public</span> <span class="keyword">class</span> <span class="class">DictionaryList</span><span class="punctuation">&lt;</span><span class="typeParam">T</span><span class="punctuation">,</span> <span class="typeParam">U</span><span class="punctuation">&gt;</span>
    <span class="punctuation">{</span>
        <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="class">Node</span><span class="punctuation">&lt;</span><span class="typeParam">T</span><span class="punctuation">,</span> <span class="typeParam">U</span><span class="punctuation">&gt;</span> <span class="fieldName">Root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="class">Node</span><span class="punctuation">&lt;</span><span class="typeParam">T</span><span class="punctuation">,</span> <span class="typeParam">U</span><span class="punctuation">&gt;</span><span class="punctuation">(</span><span class="keyword">default</span><span class="operator">!</span><span class="punctuation">,</span> <span class="keyword">null</span><span class="punctuation">)</span> <span class="punctuation">{</span> <span class="identifier">IsRoot</span> <span class="operator">=</span> <span class="keyword">true</span> <span class="punctuation">}</span><span class="punctuation">;</span>

        <span class="comment">///</span><span class="comment"> </span><span class="comment">&lt;</span><span class="comment">summary</span><span class="comment">&gt;</span>
        <span class="comment">///</span> <span class="comment">This parameter indicates whether key contains NULLs e.g [UserA, null, new User()].</span>
        <span class="comment">///</span> <span class="comment">Allowing NULLs within keys has some performance - speed and memory penalty, that&#39;s why it is disabled by default.</span>
        <span class="comment">///</span><span class="comment"> </span><span class="comment">&lt;/</span><span class="comment">summary</span><span class="comment">&gt;</span>
        <span class="keyword">public</span> <span class="keyword">bool</span> <span class="propertyName">AllowNULLsInKeys</span> <span class="punctuation">{</span> <span class="keyword">get</span><span class="punctuation">;</span> <span class="keyword">set</span><span class="punctuation">;</span> <span class="punctuation">}</span>

        <span class="comment">///</span><span class="comment"> </span><span class="comment">&lt;</span><span class="comment">summary</span><span class="comment">&gt;</span>
        <span class="comment">///</span><span class="comment"> </span>
        <span class="comment">///</span><span class="comment"> </span><span class="comment">&lt;/</span><span class="comment">summary</span><span class="comment">&gt;</span>
        <span class="comment">///</span><span class="comment"> </span><span class="comment">&lt;</span><span class="comment">param</span> <span class="comment">name</span><span class="comment">=</span><span class="comment">&quot;</span><span class="parameter">allow_keys_with_nulls</span><span class="comment">&quot;</span><span class="comment">&gt;</span><span class="comment">This parameter indicates whether key contains NULLs e.g [UserA, null, new User()].</span>
        <span class="comment">///</span> <span class="comment">Allowing NULLs within keys has some performance - speed and memory penalty, that&#39;s why it is disabled by default.</span><span class="comment">&lt;/</span><span class="comment">param</span><span class="comment">&gt;</span>
        <span class="keyword">public</span> <span class="class">DictionaryList</span><span class="punctuation">(</span><span class="keyword">bool</span> <span class="parameter">allow_keys_with_nulls</span> <span class="operator">=</span> <span class="keyword">false</span><span class="punctuation">)</span>
        <span class="punctuation">{</span>
            <span class="propertyName">AllowNULLsInKeys</span> <span class="operator">=</span> <span class="parameter">allow_keys_with_nulls</span><span class="punctuation">;</span>
        <span class="punctuation">}</span>

        <span class="keyword">public</span> <span class="keyword">void</span> <span class="method">Add</span><span class="punctuation">(</span><span class="class">List</span><span class="punctuation">&lt;</span><span class="typeParam">T</span><span class="punctuation">&gt;</span> <span class="parameter">data</span><span class="punctuation">,</span> <span class="typeParam">U</span> <span class="parameter">value</span><span class="punctuation">)</span>
        <span class="punctuation">{</span>
            <span class="keyword">var</span> <span class="localName">current</span> <span class="operator">=</span> <span class="fieldName">Root</span><span class="punctuation">;</span>

            <span class="control">for</span> <span class="punctuation">(</span><span class="keyword">int</span> <span class="localName">i</span> <span class="operator">=</span> <span class="numericLiteral">0</span><span class="punctuation">;</span> <span class="localName">i</span> <span class="operator">&lt;</span> <span class="parameter">data</span><span class="operator">.</span><span class="propertyName">Count</span><span class="punctuation">;</span> <span class="localName">i</span><span class="operator">++</span><span class="punctuation">)</span>
            <span class="punctuation">{</span>
                <span class="typeParam">T</span> <span class="localName">item</span> <span class="operator">=</span> <span class="parameter">data</span><span class="punctuation">[</span><span class="localName">i</span><span class="punctuation">]</span><span class="punctuation">;</span>

                <span class="control">if</span> <span class="punctuation">(</span><span class="operator">!</span><span class="propertyName">AllowNULLsInKeys</span> <span class="operator">&amp;&amp;</span> <span class="localName">item</span> <span class="operator">==</span> <span class="keyword">null</span><span class="punctuation">)</span>
                    <span class="control">throw</span> <span class="keyword">new</span> <span class="class">ArgumentException</span><span class="punctuation">(</span><span class="string">$&quot;</span><span class="string">Element at index &#39;</span><span class="punctuation">{</span><span class="localName">i</span><span class="punctuation">}</span><span class="string">&#39; is NULL. It cannot be used as a Key&#39;s element.</span> <span class="string">&quot;</span> <span class="operator">+</span>
                        <span class="string">$&quot;</span><span class="string">If you want to use NULLs inside Keys, then either use constructor &#39;DictionaryList(true)&#39; or set property &#39;AllowNULLsInKeys&#39; to true.</span><span class="string">&quot;</span><span class="punctuation">)</span><span class="punctuation">;</span>

                <span class="class">Node</span><span class="punctuation">&lt;</span><span class="typeParam">T</span><span class="punctuation">,</span> <span class="typeParam">U</span><span class="punctuation">&gt;</span> <span class="localName">found</span> <span class="operator">=</span> <span class="method">FindNode</span><span class="punctuation">(</span><span class="localName">current</span><span class="punctuation">,</span> <span class="localName">item</span><span class="punctuation">)</span><span class="punctuation">;</span>

                <span class="keyword">var</span> <span class="localName">isLast</span> <span class="operator">=</span> <span class="localName">i</span> <span class="operator">==</span> <span class="parameter">data</span><span class="operator">.</span><span class="propertyName">Count</span> <span class="operator">-</span> <span class="numericLiteral">1</span><span class="punctuation">;</span>

                <span class="control">if</span> <span class="punctuation">(</span><span class="localName">found</span> <span class="operator">!=</span> <span class="keyword">null</span><span class="punctuation">)</span>
                <span class="punctuation">{</span>
                    <span class="control">if</span> <span class="punctuation">(</span><span class="localName">isLast</span><span class="punctuation">)</span>
                    <span class="punctuation">{</span>
                        <span class="control">if</span> <span class="punctuation">(</span><span class="localName">found</span><span class="operator">.</span><span class="identifier">StoredValue</span> <span class="keyword">is</span> <span class="keyword">null</span><span class="punctuation">)</span>
                        <span class="punctuation">{</span>
                            <span class="localName">found</span><span class="operator">.</span><span class="identifier">StoredValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="class">ValueWrapper</span><span class="punctuation">&lt;</span><span class="typeParam">U</span><span class="punctuation">&gt;</span><span class="punctuation">(</span><span class="keyword">true</span><span class="punctuation">,</span> <span class="parameter">value</span><span class="punctuation">)</span><span class="punctuation">;</span>
                        <span class="punctuation">}</span>
                        <span class="control">else</span>
                        <span class="punctuation">{</span>
                            <span class="control">if</span> <span class="punctuation">(</span><span class="localName">found</span><span class="operator">.</span><span class="identifier">StoredValue</span><span class="operator">.</span><span class="identifier">HasValue</span> <span class="operator">&amp;&amp;</span> <span class="operator">!</span><span class="localName">found</span><span class="operator">.</span><span class="identifier">StoredValue</span><span class="operator">.</span><span class="identifier">Value</span><span class="operator">!</span><span class="operator">.</span><span class="method">Equals</span><span class="punctuation">(</span><span class="parameter">value</span><span class="punctuation">)</span><span class="punctuation">)</span>
                            <span class="punctuation">{</span>
                                <span class="control">throw</span> <span class="keyword">new</span> <span class="class">ArgumentException</span><span class="punctuation">(</span><span class="string">$&quot;</span><span class="string">Value: &#39;</span><span class="punctuation">{</span><span class="parameter">value</span><span class="punctuation">}</span><span class="string">&#39; cannot be saved because there&#39;s already value:</span><span class="string">&quot;</span> <span class="operator">+</span>
                                    <span class="string">$&quot;</span><span class="string"> </span><span class="punctuation">{</span><span class="localName">found</span><span class="operator">.</span><span class="identifier">StoredValue</span><span class="operator">.</span><span class="identifier">Value</span><span class="punctuation">}</span><span class="string">. Key:</span> <span class="punctuation">{</span><span class="keyword">string</span><span class="operator">.</span><span class="method">Join</span><span class="punctuation">(</span><span class="string">&quot;,&quot;</span><span class="punctuation">,</span> <span class="parameter">data</span><span class="punctuation">)</span><span class="punctuation">}</span><span class="string">&quot;</span><span class="punctuation">)</span><span class="punctuation">;</span>
                            <span class="punctuation">}</span>
                        <span class="punctuation">}</span>
                    <span class="punctuation">}</span>

                    <span class="localName">current</span> <span class="operator">=</span> <span class="localName">found</span><span class="punctuation">;</span>
                <span class="punctuation">}</span>
                <span class="control">else</span>
                <span class="punctuation">{</span>
                    <span class="keyword">var</span> <span class="localName">wrapper2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="class">ValueWrapper</span><span class="punctuation">&lt;</span><span class="typeParam">U</span><span class="punctuation">&gt;</span><span class="punctuation">(</span><span class="localName">isLast</span><span class="punctuation">,</span> <span class="parameter">value</span><span class="punctuation">)</span><span class="punctuation">;</span>
                    <span class="localName">current</span> <span class="operator">=</span> <span class="localName">current</span><span class="operator">.</span><span class="method">Add</span><span class="punctuation">(</span><span class="localName">item</span><span class="punctuation">,</span> <span class="localName">wrapper2</span><span class="punctuation">)</span><span class="punctuation">;</span>
                <span class="punctuation">}</span>
            <span class="punctuation">}</span>
        <span class="punctuation">}</span>

        <span class="punctuation">[</span><span class="class">MethodImpl</span><span class="punctuation">(</span><span class="enumName">MethodImplOptions</span><span class="operator">.</span><span class="enumMember">AggressiveInlining</span><span class="punctuation">)</span><span class="punctuation">]</span>
        <span class="keyword">private</span> <span class="class">Node</span><span class="punctuation">&lt;</span><span class="typeParam">T</span><span class="punctuation">,</span> <span class="typeParam">U</span><span class="punctuation">&gt;</span> <span class="method">FindNode</span><span class="punctuation">(</span><span class="class">Node</span><span class="punctuation">&lt;</span><span class="typeParam">T</span><span class="punctuation">,</span> <span class="typeParam">U</span><span class="punctuation">&gt;</span> <span class="parameter">current</span><span class="punctuation">,</span> <span class="typeParam">T</span> <span class="parameter">item</span><span class="punctuation">)</span>
        <span class="punctuation">{</span>
            <span class="control">if</span> <span class="punctuation">(</span><span class="propertyName">AllowNULLsInKeys</span><span class="punctuation">)</span>
            <span class="punctuation">{</span>
                <span class="control">for</span> <span class="punctuation">(</span><span class="keyword">int</span> <span class="localName">i</span> <span class="operator">=</span> <span class="numericLiteral">0</span><span class="punctuation">;</span> <span class="localName">i</span> <span class="operator">&lt;</span> <span class="parameter">current</span><span class="operator">.</span><span class="identifier">Children</span><span class="operator">.</span><span class="identifier">Count</span><span class="punctuation">;</span> <span class="localName">i</span><span class="operator">++</span><span class="punctuation">)</span>
                <span class="punctuation">{</span>
                    <span class="control">if</span> <span class="punctuation">(</span><span class="method">Equals</span><span class="punctuation">(</span><span class="parameter">current</span><span class="operator">.</span><span class="identifier">Children</span><span class="punctuation">[</span><span class="localName">i</span><span class="punctuation">]</span><span class="operator">.</span><span class="identifier">ArrayValue</span><span class="punctuation">,</span> <span class="parameter">item</span><span class="punctuation">)</span><span class="punctuation">)</span>
                        <span class="control">return</span> <span class="parameter">current</span><span class="operator">.</span><span class="identifier">Children</span><span class="punctuation">[</span><span class="localName">i</span><span class="punctuation">]</span><span class="punctuation">;</span>
                <span class="punctuation">}</span>
            <span class="punctuation">}</span>
            <span class="control">else</span>
            <span class="punctuation">{</span>
                <span class="control">for</span> <span class="punctuation">(</span><span class="keyword">int</span> <span class="localName">i</span> <span class="operator">=</span> <span class="numericLiteral">0</span><span class="punctuation">;</span> <span class="localName">i</span> <span class="operator">&lt;</span> <span class="parameter">current</span><span class="operator">.</span><span class="identifier">Children</span><span class="operator">.</span><span class="identifier">Count</span><span class="punctuation">;</span> <span class="localName">i</span><span class="operator">++</span><span class="punctuation">)</span>
                <span class="punctuation">{</span>
                    <span class="control">if</span> <span class="punctuation">(</span><span class="parameter">current</span><span class="operator">.</span><span class="identifier">Children</span><span class="punctuation">[</span><span class="localName">i</span><span class="punctuation">]</span><span class="operator">.</span><span class="identifier">ArrayValue</span><span class="operator">!</span><span class="operator">.</span><span class="method">Equals</span><span class="punctuation">(</span><span class="parameter">item</span><span class="punctuation">)</span><span class="punctuation">)</span>
                        <span class="control">return</span> <span class="parameter">current</span><span class="operator">.</span><span class="identifier">Children</span><span class="punctuation">[</span><span class="localName">i</span><span class="punctuation">]</span><span class="punctuation">;</span>
                <span class="punctuation">}</span>
            <span class="punctuation">}</span>

            <span class="control">return</span> <span class="keyword">null</span><span class="punctuation">;</span>
        <span class="punctuation">}</span>

        <span class="keyword">public</span> <span class="keyword">bool</span> <span class="method">TryGet</span><span class="punctuation">(</span><span class="class">List</span><span class="punctuation">&lt;</span><span class="typeParam">T</span><span class="punctuation">&gt;</span> <span class="parameter">data</span><span class="punctuation">,</span> <span class="keyword">out</span> <span class="typeParam">U</span><span class="operator">?</span> <span class="parameter">value</span><span class="punctuation">)</span>
        <span class="punctuation">{</span>
            <span class="keyword">var</span> <span class="localName">current</span> <span class="operator">=</span> <span class="fieldName">Root</span><span class="punctuation">;</span>

            <span class="control">for</span> <span class="punctuation">(</span><span class="keyword">int</span> <span class="localName">i</span> <span class="operator">=</span> <span class="numericLiteral">0</span><span class="punctuation">;</span> <span class="localName">i</span> <span class="operator">&lt;</span> <span class="parameter">data</span><span class="operator">.</span><span class="propertyName">Count</span><span class="punctuation">;</span> <span class="localName">i</span><span class="operator">++</span><span class="punctuation">)</span>
            <span class="punctuation">{</span>
                <span class="typeParam">T</span> <span class="localName">item</span> <span class="operator">=</span> <span class="parameter">data</span><span class="punctuation">[</span><span class="localName">i</span><span class="punctuation">]</span><span class="punctuation">;</span>

                <span class="class">Node</span><span class="punctuation">&lt;</span><span class="typeParam">T</span><span class="punctuation">,</span> <span class="typeParam">U</span><span class="punctuation">&gt;</span> <span class="localName">found</span> <span class="operator">=</span> <span class="method">FindNode</span><span class="punctuation">(</span><span class="localName">current</span><span class="punctuation">,</span> <span class="localName">item</span><span class="punctuation">)</span><span class="punctuation">;</span>

                <span class="keyword">var</span> <span class="localName">isLast</span> <span class="operator">=</span> <span class="localName">i</span> <span class="operator">==</span> <span class="parameter">data</span><span class="operator">.</span><span class="propertyName">Count</span> <span class="operator">-</span> <span class="numericLiteral">1</span><span class="punctuation">;</span>

                <span class="control">if</span> <span class="punctuation">(</span><span class="localName">found</span> <span class="operator">!=</span> <span class="keyword">null</span><span class="punctuation">)</span>
                <span class="punctuation">{</span>
                    <span class="control">if</span> <span class="punctuation">(</span><span class="localName">isLast</span><span class="punctuation">)</span>
                    <span class="punctuation">{</span>
                        <span class="control">if</span> <span class="punctuation">(</span><span class="localName">found</span><span class="operator">.</span><span class="identifier">StoredValue</span> <span class="operator">==</span> <span class="keyword">null</span> <span class="operator">||</span> <span class="operator">!</span><span class="localName">found</span><span class="operator">.</span><span class="identifier">StoredValue</span><span class="operator">.</span><span class="identifier">HasValue</span><span class="punctuation">)</span>
                            <span class="control">goto</span> <span class="labelName">Fail</span><span class="punctuation">;</span>

                        <span class="parameter">value</span> <span class="operator">=</span> <span class="localName">found</span><span class="operator">.</span><span class="identifier">StoredValue</span><span class="operator">.</span><span class="identifier">Value</span><span class="punctuation">;</span>
                        <span class="control">return</span> <span class="keyword">true</span><span class="punctuation">;</span>
                    <span class="punctuation">}</span>

                    <span class="localName">current</span> <span class="operator">=</span> <span class="localName">found</span><span class="punctuation">;</span>
                <span class="punctuation">}</span>
                <span class="control">else</span>
                <span class="punctuation">{</span>
                    <span class="control">goto</span> <span class="labelName">Fail</span><span class="punctuation">;</span>
                <span class="punctuation">}</span>
            <span class="punctuation">}</span>

            <span class="labelName">Fail</span><span class="punctuation">:</span>
            <span class="parameter">value</span> <span class="operator">=</span> <span class="keyword">default</span><span class="punctuation">;</span>
            <span class="control">return</span> <span class="keyword">false</span><span class="punctuation">;</span>
        <span class="punctuation">}</span>
    <span class="punctuation">}</span>
<span class="punctuation">}</span></pre>
